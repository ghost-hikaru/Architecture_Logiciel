{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '../../environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst base_url = 'http://localhost:3000';\nexport class ApiHelperService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  get({\n    endpoint,\n    queryParams = {}\n  }) {\n    environment;\n    return this.request({\n      endpoint,\n      method: 'GET',\n      queryParams\n    });\n  }\n\n  post({\n    endpoint,\n    data = {},\n    queryParams = {}\n  }) {\n    return this.request({\n      endpoint,\n      method: 'POST',\n      data,\n      queryParams\n    });\n  }\n\n  put({\n    endpoint,\n    data = {},\n    queryParams = {}\n  }) {\n    return this.request({\n      endpoint,\n      method: 'PUT',\n      data,\n      queryParams\n    });\n  }\n\n  delete({\n    endpoint,\n    data = {},\n    queryParams = {}\n  }) {\n    return this.request({\n      endpoint,\n      method: 'DELETE',\n      data,\n      queryParams\n    });\n  }\n\n  request({\n    endpoint,\n    method = 'GET',\n    data = {},\n    queryParams = {}\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const methodWanted = method.toLowerCase();\n      const url = base_url + endpoint;\n      const requestOptions = {\n        params: queryParams\n      };\n      console.log(method, url, JSON.stringify(requestOptions), JSON.stringify(data));\n      let req;\n\n      if (methodWanted === 'get') {\n        req = _this.http.get(url, { ...requestOptions,\n          observe: 'response'\n        });\n      } else if (methodWanted === 'post') {\n        req = _this.http.post(url, data, { ...requestOptions,\n          observe: 'response'\n        });\n      } else if (methodWanted === 'put') {\n        req = _this.http.put(url, data, { ...requestOptions,\n          observe: 'response'\n        });\n      } else {\n        req = _this.http.delete(url, { ...requestOptions,\n          observe: 'response'\n        });\n      }\n\n      if (!req) {\n        throw new Error(`error calling ${url} with method ${methodWanted}`);\n      }\n\n      return yield lastValueFrom(req).then(res => {\n        return res.body;\n      });\n    })();\n  }\n\n}\n\nApiHelperService.ɵfac = function ApiHelperService_Factory(t) {\n  return new (t || ApiHelperService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nApiHelperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiHelperService,\n  factory: ApiHelperService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["environment","lastValueFrom","base_url","ApiHelperService","constructor","http","get","endpoint","queryParams","request","method","post","data","put","delete","methodWanted","toLowerCase","url","requestOptions","params","console","log","JSON","stringify","req","observe","Error","then","res","body","i0","factory","providedIn"],"sourceRoot":"","sources":["/app/src/app/services/api-helper.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { Observable, lastValueFrom } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nconst base_url: string = 'http://localhost:3000';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiHelperService {\n  constructor(private http: HttpClient) { }\n\n  public get({\n    endpoint,\n    queryParams = {},\n  }: {\n    endpoint: string;\n    queryParams?: any;\n  }): Promise<any> {environment\n    return this.request({ endpoint, method: 'GET', queryParams });\n  }\n\n  public post({\n    endpoint,\n    data = {},\n    queryParams = {},\n  }: {\n    endpoint: string;\n    data?: any;\n    queryParams?: any;\n  }): Promise<any> {\n    return this.request({ endpoint, method: 'POST', data, queryParams });\n  }\n\n  public put({\n    endpoint,\n    data = {},\n    queryParams = {},\n  }: {\n    endpoint: string;\n    data?: any;\n    queryParams?: any;\n  }): Promise<any> {\n    return this.request({ endpoint, method: 'PUT', data, queryParams });\n  }\n\n  public delete({\n    endpoint,\n    data = {},\n    queryParams = {},\n  }: {\n    endpoint: string;\n    data?: any;\n    queryParams?: any;\n  }): Promise<any> {\n    return this.request({ endpoint, method: 'DELETE', data, queryParams });\n  }\n\n  public async request({\n    endpoint,\n    method = 'GET',\n    data = {},\n    queryParams = {},\n  }: {\n    endpoint: string;\n    method?: string;\n    data?: object;\n    queryParams?: any;\n  }): Promise<any> {\n    const methodWanted = method.toLowerCase();\n\n    const url = base_url + endpoint;\n\n    const requestOptions = {\n      params: queryParams,\n    };\n\n    console.log(method, url, JSON.stringify(requestOptions), JSON.stringify(data));\n\n    let req: Observable<any>;\n    if (methodWanted === 'get') {\n      req = this.http.get(url, { ...requestOptions, observe: 'response' });\n    } else if (methodWanted === 'post') {\n      req = this.http.post(url, data, {\n        ...requestOptions,\n        observe: 'response',\n      });\n    } else if (methodWanted === 'put') {\n      req = this.http.put(url, data, {\n        ...requestOptions,\n        observe: 'response',\n      });\n    } else {\n      req = this.http.delete(url, { ...requestOptions, observe: 'response' });\n    }\n\n    if (!req) {\n      throw new Error(`error calling ${url} with method ${methodWanted}`);\n    }\n\n    return await lastValueFrom(req).then((res) => {\n      return res.body;\n    });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}